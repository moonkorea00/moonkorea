[{"name":"브라우저 / CS","variant":"Browser&CS","subCategory":[{"id":1,"title":"github에서 파일을 fetch할 수 있을까?","category":"Browser&CS","path":"github에서-파일을-fetch할-수-있을까","date":"2022년 3월 4일","content":"\n> ### CORS\n>\n> 전부 변수를 선언할때 사용하는 키워드입니다. 키워드란 자바스크립트 코드를 해석하고 실행하는 엔진이 수행할 동작을 규정한 일종의 명령어입니다.\n> 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행합니다.\n\n블로그를 작성 방법에 대한 여러 가지 고민을 .github repository 네트워크 요청을 보내서 저장된 파일을 가져 올 수 있을까요?\n클라이언트 사이드에서는 서버에서 모든 오리진, 메소드 요청, 헤더 등을 \n\n여기서 CORS에 대한 개념이 등장을 합니다. CORS는 ...입니다 ...를 위해 만들어진 것이죠. \n\n<a href=\"https://google.com\">CLICK ME</a>\n\n<img src=\"public/images/test.png\" alt=\"code\" />\n\n_THIS WILL BE CHANGED_\n\n<h1>CLICK</h1>\n\n```javascript\nvar happy;\nconsole.log(happy); // undefined\n```\n\n```javascript\nconst test = num => {\n  console.log('test')\n  console.log('test')\n  console.log('test')\n  console.log('test') // undefined\n};\n```\n"},{"id":2,"title":"HTTP의 비연결성 무상태","category":"Browser&CS","path":"HTTP의-비연결성-무상태","date":"2022년 3월 4일","content":"\n# HTTP의 가장 큰 특징인 비연결성과 무상태\n\n---\n\n### 비연결성\n\n&emsp;서버는 이 순간에도 수많은 클라이언트와 http 통신을 주고 받고 있습니다. 만약 서버에서 다수의 클라이언트와 연결을 계속 유지한다면 이에 따른 엄청난 리소스가 들 뿐더러 이를 받쳐 줄 천문학적인 리소스를 유지할 수도 없을 것입니다. http에서 비연결성이란 특징은 클라이언트와 서버가 http 요청과 응답을 주고 받은 후 맺었던 연결을 끊어 버리는 성질을 말합니다.\n\n&emsp;하지만 서버는 클라이언트를 식별할 수 없기 때문에 동일한 클라이언트의 모든 http 요청에 대해 매번 연결을 맺고 끊는 과정에서 처리 시간 및 메모리 등이 추가적으로 사용됩니다.\n\n<img src=\"https://readmedata.github.io/data/http_stateless1.2.png\" width=\"560\" height=\"280\"/>\n\n<span>1.1 medium, cookie+session, https://medium.com/@maheshlsingh8412/cookie-session-story-of-a-stateless-http-3cd09cc01541</span>\n\n</br>\n\n### 무상태\n\n&emsp;&emsp;http 특징인 비연결성 때문에 서버는 클라이언트의 이전 상태를 보존하지 않는데 이를 무상태(stateless)라고 합니다. 사람 간 대화를 할때 문맥이 존재하듯 클라이언트가 서버와 연결이 끊겨도 서버가 클라이언트와 요청과 응답을 통해 소통을 하려면 stateful 상태를 유지해야합니다. 이를테면 해당 클라이언트가 과거 웹사이트에 방문을 했었는지 또는 로그인 상태에서 사이트가 제공하는 사용자 경험을 누리기 위해서는 서버가 최소한의 상태를 유지해야합니다. 일반적으로는 브라우저 <a href=\"\" target=\"_blank\" rel=\"noreferrer\"> 쿠키와 웹스토리지 등을 사용하여 상태를 유지합니다. </a>\n"},{"id":3,"title":"브라우저 렌더링","category":"Browser&CS","path":"브라우저-렌더링","date":"2022년 7월 6일","content":"# 브라우저 렌더링\n\n&emsp;웹 브라우저는 프론트엔드 개발자들이 만든 앱이 실행되는 환경이자 우리가 일상생활에서 가장 많이 사용하는 소프트웨어일 것입니다. 사용자에게 웹 페이지를 그려주는 일을 하기 위해 주소창에 url이 입력된 시점부터 웹 페이지가 보여지기까지 화면 뒤에서 무수히 많은 작업들을 합니다. \n\n<img src=\"https://readmedata.github.io/data/Screen%20Shot%202022-07-07%20at%209.40.49%20AM.png\" width=\"560\" height=\"330\">\n\n<span>1.1 브라우저에 google.com을 입력하면 어떻게 될까요?</span>\n\n&emsp;사용자가 주소 표시줄에 url을 입력하면 브라우저는 url 중 도메인 이름에 해당하는 주소를 dns 서버에서 검색을 합니다. dns 서버는 도메인 주소와 일치하는 ip 주소를 찾아서 브라우저에게 전달을 하고 브라우저는 이 ip 주소를 가진 서버에 HTML, CSS, 자바스크립트가 담긴 소스코드에 대한 http 요청을 보냅니다. 브라우저는 응답으로 받은 데이터를 화면에 출력하기에 앞서 웹 표준화 기구인 w3c 명세에 따라 데이터를 해석하는 작업을 합니다. 요청받은 내용을 브라우저 화면에 표시하는 역할을 하는 렌더링 엔진은 다음과 같이 동작합니다.\n\n&emsp;브라우저의 렌더링 엔진은 HTML을 파싱하여 HTML문서 에 대한 DOM트리를 생성합니다. 파싱 과정 중에 렌더링 엔진이 style 태그를 만나면 HTML 파싱 작업을 중지하고 CSS 파싱을 통해 CSSOM트리를 생성합니다. 각 HTML과 CSS 인풋은 document에 적용 될 콘텐츠와 스타일을 규정합니다. \n\n<img src=\"https://readmedata.github.io/data/domcssom.png\" width=\"800\" height=\"350\">\n\n<span>1.2 Render-tree Construction, Layout, and Paint, https://web.dev/critical-rendering-path-render-tree-construction/</span>\n\n&emsp;CSSOM 트리 생성을 마치면 렌더링 엔진은 HTML 파싱을 중단한 지점부터 재개하고 script tag를 만나면 자바스크립트 엔진에게 제어 권한을 넘깁니다. 자바스크립트 엔진은 script 태그 내의 자바스크립트 코드 또는 자바스크립트 파일을 로드하고 파싱하여 실행합니다. 자바스크립트의 실행이 완료가 되면 다시 렌더링 엔진으로 제어 권한이 넘어와 파싱을 중지했던 지점부터 마저 DOM을 생성합니다.\n\n> 브라우저는 동기적으로 HTML, CSS, 자바스크립트를 처리합니다. 따라서 style 태그와 script 태그의 위치에 따라 각 요소들의 파싱을 지연시킵니다. 브라우저는 CSSOM트리가 생성될 때까지 페이지 렌더링을 차단시키기 때문에 style 태그는 body 요소 위에 위치시키며 DOM이 완성되지 않은 상태에서의 DOM 조작은 에러를 발생시키기 때문에 script 태그는 body 요소 아래에 위치시킵니다.\n\n&emsp;렌더링 엔진은 본격적으로 화면에 웹 페이지를 그리기 위해 DOM트리와 CSSOM트리를 합쳐 렌더트리를 생성합니다. 렌더트리는 document 객체부터 각 노드들을 순회하면서 화면에 표시되어야 할 모든 콘텐츠, 스타일 정보와 함께 렌더에 필요한 노드만 선택해서 포함시킵니다. meta 태크 또는 display: none 속성을 가진 노드들은 렌더되는 출력값에 포함되지 않기 때문에 렌더트리에서 제외됩니다.\n\n<img src=\"https://readmedata.github.io/data/render%20tree.png\" width=\"750\" height=\"330\">\n\n<span>1.3 Render-tree Construction, Layout, and Paint, https://web.dev/critical-rendering-path-render-tree-construction/</span>\n\n&emsp;렌더트리까지 생성하는 작업이 완료가 되면 렌더링 엔진은 노드들의 크기와 뷰포트에 배치될 정확한 위치를 계산하는 layout 단계로 넘어갑니다. 이때 CSS에서 사용된 모든 상대적인 단위는 사용자 디바이스에 맞춰서 픽셀 단위로 변환됩니다. 브라우저에 출력될 노드와 해당 노드에 대한 스타일 정보까지 계산이 완료가 되면 최종적으로 paint 단계에서 각 노드들을 픽셀로 변환하여 화면에 출력합니다.\n\n&emsp;데이터를 파싱하여 DOM트리와 CSSOM트리의 생성, 배치(layout), 그리고 UI를 그리는 과정(pain)을 critical rendering path라고 합니다. Critical rendering path의 동작 순서를 정리하자면 :\n\n1. HTML 마크업을 파싱하여 DOM트리 생성\n2. CSS 마크업을 파싱하여 CSSOM트리 생성\n3. DOM과 CSSOM을 합쳐 렌더트리 생성\n4. 렌더트리에 대한 layout 작업으로 각 노드의 위치와 크기 계산\n5. 각 노드를 브라우저에 paint\n\n&emsp;사용자에 의해 자바스크립트가 실행되어 DOM이나 CSSOM에 조작이 발생할 경우 브라우저는 변경 요소에 따라 1번부터 5번까지 다시 작업을 실행합니다. Critical rendering path의 최적화는 해당 sequence에 할애되는 비용을 최소화하는 프로세스이며 렌더링 최적화는 초기 렌더링부터 리렌더링까지 얼마나 원활한 사용자 경험을 제공할 것인지를 결정짓습니다.\n"},{"id":4,"title":"변수","category":"Browser&CS","path":"변수","date":"2022년 3월 4일","content":"\n> ### var, let, const는 뭔가요?\n>\n> 전부 변수를 선언할때 사용하는 키워드입니다. 키워드란 자바스크립트 코드를 해석하고 실행하는 엔진이 수행할 동작을 규정한 일종의 명령어입니다.\n> 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행합니다.\n\n<a href=\"https://google.com\">CLICK ME</a>\n\n<img src=\"public/images/test.png\" alt=\"code\" />\n\n_THIS WILL BE CHANGED_\n\n<h1>CLICK</h1>\n\n```javascript\nvar happy;\nconsole.log(happy); // undefined\n```\n\n```javascript\nconst test = num => {\n  console.log('test')\n  console.log('test')\n  console.log('test')\n  console.log('test') // undefined\n};\n```\n"}]},{"name":"자바스크립트","variant":"Javascript","subCategory":[{"id":5,"title":"이벤트 루프","category":"Javascript","path":"이벤트-루프","date":"2022년 4월 1일","content":"\n# 이벤트 루프\n\n변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.\n\n> ### **변수의 선언이란?**&nbsp;\n>[변수](www.google.com)의 선언이란 변수를 생성하는 것을 말한다. 구체적으로 하나의 값을 저장하기 위해 메모리 공간 자체를 확보하고 변수 이름과 메모리 공간의 주소를 연결해 값을 저장하는 것이다.\n>\n> 변수를 사용하려면 선언을 반드시 해야하고 선언할 때는 var, let, const 키워드를 사용한다.\n\n> ### var, let, const는 뭔가요?\n>\n> 전부 변수를 선언할때 사용하는 키워드입니다. 키워드란 자바스크립트 코드를 해석하고 실행하는 엔진이 수행할 동작을 규정한 일종의 명령어입니다.\n> 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행합니다.\n\n\nvar는 다음과 같은 특징이 있습니다.\n\n- 변수 중복 선언 허용\n- 함수 레벨 스코프\n- 변수 호이스팅\n\n```javascript\nvar happy;\nconsole.log(happy); // undefined\n```\n\n# 변수\n\n변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.\n\n> ### **변수의 선언이란?**\n> [변수](www.google.com)의 선언이란 변수를 생성하는 것을 말한다. 구체적으로 하나의 값을 저장하기 위해 메모리 공간 자체를 확보하고 변수 이름과 메모리 공간의 주소를 연결해 값을 저장하는 것이다.\n> 변수를 사용하려면 선언을 반드시 해야하고 선언할 때는 var, let, const 키워드를 사용한다.\n\n> ### var, let, const는 뭔가요?\n>\n> 전부 변수를 선언할때 사용하는 키워드입니다. 키워드란 자바스크립트 코드를 해석하고 실행하는 엔진이 수행할 동작을 규정한 일종의 명령어입니다.\n> 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행합니다.\n\nvar는 다음과 같은 특징이 있습니다.\n\n- 변수 중복 선언 허용\n- 함수 레벨 스코프\n- 변수 호이스팅\n\n```javascript\nvar happy;\nconsole.log(happy); // undefined\n```\n"},{"id":6,"title":"Promise","category":"Javascript","path":"Promise","date":"2022년 4월 1일","content":"\n# 변수\n\n변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.\n\n> ### **변수의 선언이란?**&nbsp;\n>[변수](www.google.com)의 선언이란 변수를 생성하는 것을 말한다. 구체적으로 하나의 값을 저장하기 위해 메모리 공간 자체를 확보하고 변수 이름과 메모리 공간의 주소를 연결해 값을 저장하는 것이다.\n>\n> 변수를 사용하려면 선언을 반드시 해야하고 선언할 때는 var, let, const 키워드를 사용한다.\n\n> ### var, let, const는 뭔가요?\n>\n> 전부 변수를 선언할때 사용하는 키워드입니다. 키워드란 자바스크립트 코드를 해석하고 실행하는 엔진이 수행할 동작을 규정한 일종의 명령어입니다.\n> 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행합니다.\n\n\nvar는 다음과 같은 특징이 있습니다.\n\n- 변수 중복 선언 허용\n- 함수 레벨 스코프\n- 변수 호이스팅\n\n```javascript\nvar happy;\nconsole.log(happy); // undefined\n```\n\n# 변수\n\n변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.\n\n> ### **변수의 선언이란?**\n> [변수](www.google.com)의 선언이란 변수를 생성하는 것을 말한다. 구체적으로 하나의 값을 저장하기 위해 메모리 공간 자체를 확보하고 변수 이름과 메모리 공간의 주소를 연결해 값을 저장하는 것이다.\n> 변수를 사용하려면 선언을 반드시 해야하고 선언할 때는 var, let, const 키워드를 사용한다.\n\n> ### var, let, const는 뭔가요?\n>\n> 전부 변수를 선언할때 사용하는 키워드입니다. 키워드란 자바스크립트 코드를 해석하고 실행하는 엔진이 수행할 동작을 규정한 일종의 명령어입니다.\n> 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행합니다.\n\nvar는 다음과 같은 특징이 있습니다.\n\n- 변수 중복 선언 허용\n- 함수 레벨 스코프\n- 변수 호이스팅\n\n```javascript\nvar happy;\nconsole.log(happy); // undefined\n```\n"},{"id":7,"title":"JS TEST","category":"Javascript","path":"JS-TEST","date":"2022년 3월 4일","content":"\n> ### CORS\n>\n> 전부 변수를 선언할때 사용하는 키워드입니다. 키워드란 자바스크립트 코드를 해석하고 실행하는 엔진이 수행할 동작을 규정한 일종의 명령어입니다.\n> 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행합니다.\n\n블로그를 작성 방법에 대한 여러 가지 고민을 .github repository 네트워크 요청을 보내서 저장된 파일을 가져 올 수 있을까요?\n클라이언트 사이드에서는 서버에서 모든 오리진, 메소드 요청, 헤더 등을 \n\n여기서 CORS에 대한 개념이 등장을 합니다. CORS는 ...입니다 ...를 위해 만들어진 것이죠. \n\n<a href=\"https://google.com\">CLICK ME</a>\n\n<img src=\"public/images/test.png\" alt=\"code\" />\n\n_THIS WILL BE CHANGED_\n\n<h1>CLICK</h1>\n\n```javascript\nvar happy;\nconsole.log(happy); // undefined\n```\n\n```javascript\nconst test = num => {\n  console.log('test')\n  console.log('test')\n  console.log('test')\n  console.log('test') // undefined\n};\n```\n"},{"id":8,"title":"한글 URI가 깨져서 나와요 decodeURI()","category":"Javascript","path":"한글-URI가-깨져서-나와요-decodeURI()","date":"2022년 6월 26일","content":"\n> ### 한글 uri가 깨져서 나와요 decodeURI()\n\n간혹 브라우저 uri에 **%20**가 포함된 경우를 보셨을겁니다. 브라우저는 문자간 공백문자를 인코딩하는 과정에서 치환합니다.\n\nuri값을 사용하거나 인코딩된 uri를 한글로 다시 디코딩해야하는 경우가 있습니다.\n\n**decodeURI()**는 encodeURI 또는 비슷한 루틴으로 생성된 uri를 디코딩 해줍니다.\n\n```javascript\nconst uri = 'https://somesite.com/리액트';\nconst encoded = encodeURI(uri);\nconsole.log(encoded);\n// expected output: \"https://somesite.com/%EB%A6%AC%EC%95%A1%ED%8A%B8\"\nconsole.log(window.location.pathname)\n// expected output: \"https://somesite.com/%EB%A6%AC%EC%95%A1%ED%8A%B8\"\n\ntry {\n  console.log(decodeURI(encoded));\n  // expected output: \"https://somesite.com/리액트\"\n} catch (e) {\n  console.error(e);\n}\n```\n\nwindow객체나 훅으로 uri나 리소스에 접근하실때 사용해보면 되겠습니다."}]},{"name":"리액트","variant":"React","subCategory":[{"id":9,"title":"TEST","category":"React","path":"TEST","date":"2022년 3월 4일","content":"\n> ### var, let, const는 뭔가요?\n>\n> 전부 변수를 선언할때 사용하는 키워드입니다. 키워드란 자바스크립트 코드를 해석하고 실행하는 엔진이 수행할 동작을 규정한 일종의 명령어입니다.\n> 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행합니다.\n\n<a href=\"https://google.com\">CLICK ME</a>\n\n<img src=\"public/images/test.png\" alt=\"code\" />\n\n_THIS WILL BE CHANGED_\n\n<h1>CLICK</h1>\n\n```javascript\nvar happy;\nconsole.log(happy); // undefined\n```\n\n```javascript\nconst test = num => {\n  console.log('test')\n  console.log('test')\n  console.log('test')\n  console.log('test') // undefined\n};\n```\n"},{"id":10,"title":"REACT TEST","category":"React","path":"REACT-TEST","date":"2022년 3월 4일","content":"\n> ### var, let, const는 뭔가요?\n>\n> 전부 변수를 선언할때 사용하는 키워드입니다. 키워드란 자바스크립트 코드를 해석하고 실행하는 엔진이 수행할 동작을 규정한 일종의 명령어입니다.\n> 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행합니다.\n\n<a href=\"https://google.com\">CLICK ME</a>\n\n<img src=\"public/images/test.png\" alt=\"code\" />\n\n_THIS WILL BE CHANGED_\n\n<h1>CLICK</h1>\n\n```javascript\nvar happy;\nconsole.log(happy); // undefined\n```\n\n```javascript\nconst test = num => {\n  console.log('test')\n  console.log('test')\n  console.log('test')\n  console.log('test') // undefined\n};\n```\n"}]}]