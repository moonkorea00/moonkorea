[
  {
    "id": 1,
    "title": "S3 CI-CD 파이프라인 구축 (Github Actions)",
    "category": "AWS",
    "path": "S3-CI-CD-파이프라인-구축-(Github-Actions)",
    "date": "2022년 7월 24일",
    "content": "\n# S3 CI/CD 파이프라인 구축 - Github Actions\n\n&emsp;S3 버킷을 사용해서 앱 배포까지 완료가 되었으면 Github Actions를 통해서 CI/CD 파이프라인을 구축합니다. 코드베이스에 변경 사항이 생길 때마다 빌드, 테스트, 배포 자동화까지 한 번에 처리합니다.\n\nGithub Actions를 사용하기 위해서는 S3 접근 권한이 필요하기 떄문에 **AWS IAM**(Identity and Access Management)으로 리소스에 대한 권한을 허용할 수 있습니다.\n\n1. **IAM - 액세스 관리 - 사용자**탭에서 S3에 접근할 수 있도록 사용자를 새로 추가합니다.\n\n<img src=\"https://readmedata.github.io/data/add_user.png\" alt=\"IAM 사용자 추가\" width=\"1100\">\n<span>IAM - 사용자 추가</span>\n\n2. **사용자 이름** 등록 후 **액세스 키 - 프로그래밍 방식 액세스** 유형을 선택해 줍니다.\n\n<img src=\"https://readmedata.github.io/data/user_details.png\" alt=\"IAM 사용자 세부 정보 설정\" height=\"700\">\n<span>사용자 세부 정보 설정</span>\n\n3. **권한 설정**에서 **기존 정책 직접 연결** 선택 후 **AmazonS3FullAccess**를 선택해 줍니다.\n\n<img src=\"https://readmedata.github.io/data/step2.png\" alt=\"권한 설정\" height=\"700\">\n<span>권한 설정</span>\n\n4. 사용자 세부 정보 설정 단계까지 완료했으면 5단계까지 넘어갑니다. 사용자가 성공적으로 추가가 되었으면 사용자에 대한 **액세스 키 ID**와 **비밀 액세스 키**가 생성됩니다.\n\n<img src=\"https://readmedata.github.io/data/keys.png\" alt=\"사용자 추가\" height=\"650\">\n<span>사용자 추가</span>\n\n5. Github Actions에서 해당 액세스 키 ID와 비밀 액세스 키를 활용해서 **Settings-Secrets-Actions**에 환경 변수로 등록해 줍니다. 아래와 같이 **AWS_ACCESS_KEY_ID**와 **AWS_SECRET_ACCESS_KEY**의 이름으로 환경 변수를 생성합니다. 해당 레포에 등록되어 있는 모든 collaborator는 secrets를 사용할 수 있습니다.\n\n<img src=\"https://readmedata.github.io/data/access-key.png\" alt=\"Actions secrets-액세스 키 ID-비밀 액세스 키\" height=\"600\">\n<span>AWS_ACCESS_KEY_ID</span>\n\n<img src=\"https://readmedata.github.io/data/secret-key.png\" alt=\"Actions secrets-액세스 키 ID-비밀 액세스 키\" height=\"600\">\n<span>AWS_SECRET_ACCESS_KEY</span>\n\n6. 앱이 위치해있는 디렉토리에서 **.github** 폴더와 **workflows** 폴더를 생성합니다. main 브랜치에 push할 때마다 읽고 실행할 **some-script-name.yml** 파일을 만들어주세요.\n\n```Shell\ncd my-app\nmkdir .github && cd \"$_\"\nmkdir workflows && cd \"&_\"\ntouch some-script-name.yml\n```\n\n```YAML\nname: some script name\non:\n push:\n   branches:\n     - main\n\njobs:\n Deploy:\n   runs-on: ubuntu-latest\n   steps:\n     - name: Checkout\n       uses: actions/checkout@v2\n\n     - name: Setup node\n       uses: actions/setup-node@v2\n\n     - name: Install dependencies\n       run: npm install\n\n     - name: Build static file\n       run: npm run build\n\n     - name: Configure AWS Credentials\n       uses: aws-actions/configure-aws-credentials@v1\n       with:\n         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n         aws-region: ap-northeast-2\n\n     - name: Deploy static site to S3 bucket\n       run: aws s3 sync ./build s3://S3 버킷 이름\n```\n\n기타 환경 변수는 하단에 주석 처리된 **build s3://** 값으로는 생성한 S3 버킷 이름으로 해줍니다.\n\n> CloudFront 액세스 허용, yarn 혹은 기타 환경 변수를 등록하고 사용할 경우 그에 맞게 스크립트를 변경해 줍니다.\n"
  },
  {
    "id": 2,
    "title": "Cloud Front",
    "category": "AWS",
    "path": "Cloud-Front",
    "date": "2022년 7월 24일",
    "content": "\n# cloud front\n\nyou need to manually create CNAME records to pass verification process\n"
  },
  {
    "id": 3,
    "title": "CloudFront 에러 - This XML file does not appear to have any style information associated with it",
    "category": "AWS",
    "path": "CloudFront-에러---This-XML-file-does-not-appear-to-have-any-style-information-associated-with-it",
    "date": "2022년 7월 24일",
    "content": "\n# CloudFront 도메인 에러\n\n로컬 서버에서는 앱이 문제없이 작동하다가 CloudFront 배포 후 대체 도메인 이름으로 접근하려고 하면 다음과 같은 텍스트가 출력이 되는 경우가 있습니다.\n\n<img src=\"https://readmedata.github.io/data/cloudfront_error.png\" alt=\"This XML file does not appear to have any style information associated with it\">\n\n<span>CloudFront 도메인 에러</span>\n\n도메인 에러는 트러블 슈팅할게 많지 않아 CloudFront 설정 편집 혹은 S3 버킷 설정 편집으로 대부분 해결이 가능합니다.\n\n### CloudFront 설정\n\n**CloudFront - 배포 - 원본**탭 접근 후 원본 편집 설정에서 **원본 도메인**을 **버킷 웹 사이트 엔드포인트**로 직접 입력해 주세요. 입력란을 클릭했을 때 나타나는 도메인으로 설정했을 경우 도메인 에러 메시지가 출력될 수 있습니다.\n\n<img src=\"https://readmedata.github.io/data/cloudfront_edit.png\" alt=\"CloudFront 원본 도메인\">\n\n<span>원본 도메인 설정</span>\n\n> 버킷 웹 사이트 엔드포인트는 **S3 버킷 - 속성탭 하단**에서 확인이 가능합니다.\n>\n> 예) 엔드포인트 http://moonkorea00.com.s3-website.ap-northeast-2.amazonaws.com 를 복사 후 원본 도메인에 붙여넣기 합니다.\n\n### S3 버킷 설정\n\nAWS S3 **퍼블릭 액세스 차단** 기능을 해제해 주세요. S3 퍼블릭 액세스 차단 기능은 리소스에 대한 퍼블릭 액세스를 제한하는 기능이기 때문에 앱을 호스팅해서 도메인으로 접근하려면 모든 퍼블릭 액세스 차단을 해제해야 합니다.\n\n<img src=\"https://readmedata.github.io/data/S3_public_access.png\" alt=\"S3 버킷 퍼블릭 액세스 파단 편집\">\n\n<span>퍼블릭 액세스 차단 편집(버킷 설정)</span>\n"
  },
  {
    "id": 4,
    "title": "커스텀 도메인 (Route 53)",
    "category": "AWS",
    "path": "커스텀-도메인-(Route-53)",
    "date": "2022년 7월 24일",
    "content": "\n# 커스텀 도메인 (Route 53)\n\n&emsp;AWS S3를 사용해서 버킷을 생성했으면 Route 53으로 도메인을 등록합니다. Route 53으로는 도메인의 인터넷 트래픽을 라우팅할 위치를 정의하기 때문에 별칭 레코드(alias)를 생성해 IP 주소 대신 S3 웹 사이트 엔드포인트를 사용합니다. ACM(AWS Certificate Manager) 인증서없이 호스팅되기 때문에 http 프로토콜로 커스텀 도메인이 호스팅됩니다. 커스텀 도메인 설정은 트러블 슈팅할게 많지 않기에 아래 단계에서는 **moonkorea.dev**을 도메인 예제로 생성하는 방법을 알아보겠습니다.\n\n1. <a href=\"https://console.aws.amazon.com/route53/\" target=”_blank” rel=\"noreferrer\">https://console.aws.amazon.com/route53/</a>에서 **호스팅 영역**(Hosted zone)을 생성해줍니다.\n\n<img src=\"https://readmedata.github.io/data/create_hostzone.png\" alt=\"호스팅\" width=\"1100\" height=\"350\">\n<span>호스팅 영역 생성</span>\n\n2. 트래픽을 라우팅할 **도메인의 이름**을 설정해 줍니다. 호스팅 영역을 생성할 때 이미 만든 S3 버킷 이름과 동일해야 커스텀 도메인을 사용할 수 있기 때문에 호스팅 영역 이름을 S3 버킷 이름과 동일하게 생성해 줍니다.\n\n<img src=\"https://readmedata.github.io/data/create_host_zone_detail.png\" alt=\"\">\n<span>도메인 이름 설정</span>\n\n3. 호스팅 영역을 생성했으면 해당 호스팅 영역에 접근하고 A유형의 **레코드**(record)를 생성해 줍니다.\n\n<img src=\"https://readmedata.github.io/data/create_record.png\" alt=\"\" width=\"1000\" height=\"450\">\n<span>레코드 생성</span>\n\n4. 위에서 언급했듯 루트 도메인에 대한 레코드 이름과 S3 버킷 이름이 일치해야 라우팅이 가능해집니다. 이를테면 버킷 이름이 **www.myapp.com**이고 호스팅 영역 이름이 **myapp.com**이면 subdomain에 **www**을 추가해 줍니다. 예제에서는 S3 버킷 이름과 호스팅 영역 이름이 둘 다 moonkorea.dev이기 때문에 subdomain은 공란으로 두었습니다. 별칭(alias)을 활성화해주세요. 커스텀 도메인은 S3 엔드포인트에 대한 별칭이기 때문에 하단의 **S3 웹 사이트 엔드포인트에 대한 별칭**(Alias to S3 website endpoint)으로 설정해 줍니다. 리전까지 선택을 한 후 S3 엔드포인트를 선택해 주세요(S3 버킷 이름과 레코드 이름이 다르면 리소스를 찾을 수 없습니다). 레코드 생성 상태가 pending에서 INSYNC로 변경되면 설정한 커스텀 도메인으로 접근이 가능합니다.\n\n<img src=\"https://readmedata.github.io/data/create_record_detail.png\" alt=\"\" width=\"1000\" height=\"550\">\n<span>레코드 이름 및 트래픽을 라우팅할 위치 설정</span>\n\n"
  },
  {
    "id": 5,
    "title": "커스텀 도메인 (CloudFront)",
    "category": "AWS",
    "path": "커스텀-도메인-(CloudFront)",
    "date": "2022년 7월 24일",
    "content": "\n# 커스텀 도메인 (CloudFront)\n\nAWS CloudFront는 캐싱 서버와 CDN 서비스를 제공하고 html, css, js 및 이미지 파일 등과 같은 정적/동적 콘텐츠를 최종 사용자에게 더 빨리 배포하도록 지원하는 서비스입니다. 최소한의 지연 시간과 최적의 데이터 전송 속도로 사용자가에게 웹 콘텐츠를 제공합니다.\n\n>CloudFront는 엣지 로케이션이라고 하는 데이터 센터의 네트워크를 통해 콘텐츠를 제공합니다. 서버가 서울에 있던 캘리포니아에 있던 사용자가 콘텐츠를 요청하며 지연시간이 가장 낮은 엣지 로케이션으로 요청이 라우팅됩니다. \n\n\nssl 인증서를 사용하기 때문에 region 설정은 고정입니다."
  },
  {
    "id": 6,
    "title": "CRA 배포 (AWS S3)",
    "category": "AWS",
    "path": "CRA-배포-(AWS-S3)",
    "date": "2022년 7월 24일",
    "content": "\n> ### CRA 배포(AWS S3)"
  },
  {
    "id": 7,
    "title": "github에서 파일을 fetch할 수 있을까?",
    "category": "Browser&CS",
    "path": "github에서-파일을-fetch할-수-있을까",
    "date": "2022년 3월 4일",
    "content": "\n> ### CORS"
  },
  {
    "id": 8,
    "title": "Google Search Console (AWS)",
    "category": "Browser&CS",
    "path": "Google-Search-Console-(AWS)",
    "date": "2022년 7월 24일",
    "content": "\n> ### Google Search Console(AWS)"
  },
  {
    "id": 9,
    "title": "HTTP의 비연결성 무상태",
    "category": "Browser&CS",
    "path": "HTTP의-비연결성-무상태",
    "date": "2022년 3월 4일",
    "content": "\n# HTTP의 가장 큰 특징인 비연결성과 무상태\n\n### 비연결성\n\n&emsp;서버는 이 순간에도 수많은 클라이언트와 http 통신을 주고 받고 있습니다. 만약 서버가 다수의 클라이언트와 연결을 계속 유지한다면 이에 따른 엄청난 리소스가 들 뿐더러 이를 받쳐 줄 천문학적인 리소스를 유지할 수도 없을 것입니다. http에서 비연결성이란 특징은 클라이언트와 서버가 http 요청과 응답을 주고 받은 후 맺었던 연결을 끊어 버리는 성질을 말합니다.\n\n&emsp;하지만 서버는 클라이언트를 식별할 수 없기 때문에 동일한 클라이언트의 모든 http 요청에 대해 매번 연결을 맺고 끊는 과정에서 처리 시간 및 메모리 등이 추가적으로 소모됩니다.\n\n<img src=\"https://readmedata.github.io/data/http_stateless1.2.png\" alt=\"http 비연경설 무상태\" width=\"560\" height=\"280\"/>\n\n<span>1.1 medium, cookie+session, https://medium.com/@maheshlsingh8412/cookie-session-story-of-a-stateless-http-3cd09cc01541</span>\n\n</br>\n\n### 무상태\n\n&emsp;&emsp;http 특징인 비연결성 때문에 서버는 클라이언트의 이전 상태를 보존하지 않는데 이를 무상태(stateless)라고 합니다. 사람 간 대화를 할때 문맥이 존재하듯 클라이언트가 서버와 연결이 끊기더라도 요청과 응답을 통해 소통을 하려면 stateful 상태를 유지해야합니다. 이를테면 해당 클라이언트가 과거 웹사이트에 방문을 했었는지 또는 로그인 상태에서 사이트가 제공하는 사용자 경험을 누리기 위해서는 서버가 최소한의 상태를 유지해야합니다. 일반적으로는 브라우저 <a href=\"\" target=\"_blank\" rel=\"noreferrer\"> 쿠키와 웹스토리지 등을 사용하여 상태를 유지합니다. </a>\n"
  },
  {
    "id": 10,
    "title": "브라우저 렌더링",
    "category": "Browser&CS",
    "path": "브라우저-렌더링",
    "date": "2022년 7월 6일",
    "content": "# 브라우저 렌더링\n\n&emsp;웹 브라우저는 프론트엔드 개발자들이 만든 앱이 실행되는 환경이자 우리가 일상생활에서 가장 많이 사용하는 소프트웨어일 것입니다. 사용자에게 웹 페이지를 그려주는 일을 하기 위해 주소창에 url이 입력된 시점부터 웹 페이지가 보여지기까지 화면 뒤에서 무수히 많은 작업들을 합니다. \n\n<img src=\"https://readmedata.github.io/data/Screen%20Shot%202022-07-07%20at%209.40.49%20AM.png\" alt=\"브라우저 주소창 검색\" width=\"560\" height=\"330\">\n\n<span>1.1 브라우저에 google.com을 입력하면 어떻게 될까요?</span>\n\n&emsp;사용자가 주소 표시줄에 url을 입력하면 브라우저는 url 중 도메인 이름에 해당하는 주소를 dns 서버에서 검색을 합니다. dns 서버는 도메인 주소와 일치하는 ip 주소를 찾아서 브라우저에게 전달을 하고 브라우저는 이 ip 주소를 가진 서버에 HTML, CSS, 자바스크립트가 담긴 소스코드에 대한 http 요청을 보냅니다. 브라우저는 응답으로 받은 데이터를 화면에 출력하기에 앞서 웹 표준화 기구인 w3c 명세에 따라 데이터를 해석하는 작업을 합니다. 요청받은 내용을 브라우저 화면에 표시하는 역할을 하는 렌더링 엔진은 다음과 같이 동작합니다.\n\n>### 렌더링\n>렌더링은 HTML, CSS, 자바스크립트로 작성된 문서를 파싱하여 브라우저에 시각적으로 출력하는 것을 의미합니다.\n\n>### 파싱\n>파싱은 프로그래밍 언어의 문법에 맞게 작성된 텍스트 문서를 읽어 들여 실행하기 위해 **텍스트 문서의 문자열을 토큰 단위로 분해**하고, 토큰의 문법적 의미와 구조를 반영하여 트리 구조의 자료구조인 파스 트리를 생성하는 일련의 과정을 말한다.\n\n&emsp;브라우저의 렌더링 엔진은 HTML을 파싱하여 모든 노드들을 트리 자료구조인 DOM트리를 생성합니다. 파싱 과정 중에 렌더링 엔진이 style 태그를 만나면 HTML 파싱 작업을 중지하고 CSS 파싱을 통해 CSSOM트리를 생성합니다. 각 HTML과 CSS 인풋은 document에 적용 될 콘텐츠와 스타일을 규정합니다. \n\n<img src=\"https://readmedata.github.io/data/domcssom.png\" alt=\"DOM CSSOM\" width=\"800\" height=\"350\">\n\n<span>1.2 Render-tree Construction, Layout, and Paint, https://web.dev/critical-rendering-path-render-tree-construction/</span>\n\n&emsp;CSSOM 트리 생성을 마치면 렌더링 엔진은 HTML 파싱을 중단한 지점부터 재개하고 script tag를 만나면 자바스크립트 엔진에게 제어 권한을 넘깁니다. 자바스크립트 엔진은 script 태그 내의 자바스크립트 코드 또는 자바스크립트 파일을 읽고 실행 하는 것을 담당합니다. 자바스크립트 엔진은 자바스크립트를 해석하여 AST(Abstract Syntax Tree)를 생성하고 AST를 기반으로 인터프리터가 실행할 수 있는 중간 코드인 바이트 코드를 생성하여 실행합니다. 자바스크립트의 실행이 완료가 되면 다시 렌더링 엔진으로 제어 권한이 넘어와 파싱을 중지했던 지점부터 마저 DOM을 생성합니다.\n\n> 브라우저는 동기적으로 HTML, CSS, 자바스크립트를 처리합니다. 따라서 style 태그와 script 태그의 위치에 따라 각 요소들의 파싱을 지연시킵니다. 브라우저는 CSSOM트리가 생성될 때까지 페이지 렌더링을 차단시키기 때문에 style 태그는 body 요소 위에 위치시키며 DOM이 완성되지 않은 상태에서의 DOM 조작은 에러를 발생시키기 때문에 script 태그는 body 요소 아래에 위치시킵니다.\n\n&emsp;렌더링 엔진은 본격적으로 화면에 웹 페이지를 그리기 위해 DOM트리와 CSSOM트리를 합쳐 렌더트리를 생성합니다. 렌더트리는 document 객체부터 각 노드들을 순회하면서 화면에 표시되어야 할 모든 콘텐츠, 스타일 정보와 함께 렌더에 필요한 노드만 선택해서 포함시킵니다. meta 태크 또는 display: none 속성을 가진 노드들은 렌더되는 출력값에 포함되지 않기 때문에 렌더트리에서 제외됩니다.\n\n<img src=\"https://readmedata.github.io/data/render%20tree.png\" alt=\"렌더 트리 render tree\" width=\"750\" height=\"330\">\n\n<span>1.3 Render-tree Construction, Layout, and Paint, https://web.dev/critical-rendering-path-render-tree-construction/</span>\n\n&emsp;렌더트리까지 생성하는 작업이 완료가 되면 렌더링 엔진은 노드들의 크기와 뷰포트에 배치될 정확한 위치를 계산하는 layout 단계로 넘어갑니다. 이때 CSS에서 사용된 모든 상대적인 단위는 사용자 디바이스에 맞춰서 픽셀 단위로 변환됩니다. 브라우저에 출력될 노드와 해당 노드에 대한 스타일 정보까지 계산이 완료가 되면 최종적으로 paint 단계에서 각 노드들을 픽셀로 변환하여 화면에 출력합니다.\n\n&emsp;데이터를 파싱하여 DOM트리와 CSSOM트리의 생성, 배치(layout), 그리고 UI를 그리는 과정(pain)을 critical rendering path라고 합니다. Critical rendering path의 동작 순서를 정리하자면 :\n\n> 1. HTML 마크업을 파싱하여 DOM트리 생성\n> 2. CSS 마크업을 파싱하여 CSSOM트리 생성\n> 3. DOM과 CSSOM을 합쳐 렌더트리 생성\n> 4. 렌더트리에 대한 layout 작업으로 각 노드의 위치와 크기 계산\n> 5. 각 노드를 브라우저에 paint\n\n&emsp;사용자에 의해 자바스크립트가 실행되어 DOM이나 CSSOM에 조작이 발생할 경우 브라우저는 변경 요소에 따라 1번부터 5번까지 다시 작업을 실행합니다. Critical rendering path의 최적화는 해당 sequence에 할애되는 비용을 최소화하는 프로세스이며 렌더링 최적화는 초기 렌더링부터 리렌더링까지 얼마나 원활한 사용자 경험을 제공할 것인지를 결정짓습니다.\n"
  },
  {
    "id": 11,
    "title": "클로저",
    "category": "Javascript",
    "path": "클로저",
    "date": "2022년 7월 10일",
    "content": "\n# 클로저\n클로저는 자신이 선언될 당시의 환경을 기억하는 함수를 의미합니다.\n\n클로저는 함수와 그 함수가 선언된 렉시컬 환경과의 조합을 의미합니다.\n\n해당 함수의 생명 주기가 종료되더라도 함수의 반환된 값이 변수에 의해 아직 참조되고 있다면 생명 주기가 종료되더라도 렉시컬 환경에 남아 참조가 가능하다.\n\n"
  },
  {
    "id": 12,
    "title": "이벤트 루프",
    "category": "Javascript",
    "path": "이벤트-루프",
    "date": "2022년 4월 1일",
    "content": "\n# 이벤트 루프\n"
  },
  {
    "id": 13,
    "title": "함수형 프로그래밍과 순수 함수",
    "category": "Javascript",
    "path": "함수형-프로그래밍과-순수-함수",
    "date": "2022년 7월 17일",
    "content": "\n# 함수형 프로그래밍과 순수 함수\n\n&emsp;함수형 프로그래밍과 순수 함수는 redux의 순수 함수와 리액트의 함수형 컴포넌트의 등장으로 주목도가 올라가게 되었고 안정적이고 예측 가능한 코드를 만들고자 하는 목적과 방향성에서 더욱 주목받게 되었습니다. 순수 함수는 동일한 입력값을 전달했을 때 언제나 동일한 결과값을 반환하는 함수입니다, 즉 **외부 상태를 변경하지 않고 외부 상태에 의존하지도 않는 함수**입니다. 함수에서 외부의 상태값을 참조하거나 또는 외부의 상태를 변경하는 것을 순수 함수라고 볼 수 없습니다.\n\n```js\nfunction add(a, b) {\n  const total = a + b;\n  return total;\n}\n```\n\n&emsp;위 함수 add에서는 동일한 인자 a와 b를 입력값으로 넣었을때 결과값인 total은 언제나 동일한 값으로 반환됩니다. 함수의 인자가 아닌 외부 변수를 사용하지 않으며 외부 변수의 값을 수정하지 않습니다.\n\n> ### 순수 함수의 조건\n>\n> 1.  동일한 인자를 넣을 경우 항상 같은 값을 반환해야 한다.\n>\n> - 함수의 인자가 아닌 외부 변수를 사용하지 않아야 합니다. (상수는 OK)\n> - 함수 내부에서 Math.random()이나 file I/O등 호출때마다 달라지는 값이 없어야 합니다.\n>\n> 2.  함수가 호출되고 나서 아무런 변화가 없어야 한다.\n>\n> - 외부 변수의 값을 수정하지 않아야 합니다.\n> - 인자로 넘어온 Object나 Array, Date와 같은 값들의 필드를 내부에서 변경하지 않아야 합니다.\n> - 콘솔, 네트워크, 기타 DOM API등을 사용하지 않아야 합니다.\n> - try ~ catch등 같은 에러 처리 로직을 사용하지 않아야 한다.\n\n<span>함수형 프로그래밍, https://velog.io/@teo/프론트엔드-일단-한번-해보세요-함수형-프로그래밍</span>\n\n&emsp;함수형 프로그래밍에서는 외부의 상태나 함수에 인자로 전달된 데이터의 상태를 변경하지 않음으로써 부수 효과를 만들지 않으므로 불변성을 유지하기 때문에 멀티 스레드 환경에서도 안정적으로 동작할 수 있습니다. 안정적으로 동작한다는 것은 결과값이 예측 가능하며 오류를 피하거나 수정하기 용이하다는 의미입니다.\n\n> ### 부수 효과\n>\n> 함수를 호출하면 외부의 상태가 변경되거나 예상하지 못한 에러가 발생하는 효과\n\n```js\nfunction addThenLog(a, b) {\n  const total = a + b;\n  console.log(total);\n}\n\nfunction getRandomColor() {\n  const rgba = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += rgba[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n```\n\n&emsp;함수 addThenLog는 순수 함수처럼 보이지만 비순수 함수입니다. 비순수 함수는 console.log나 Math.random() 등 호출할 때마다 값이 달라지거나 외부 상태에 의존하고 부수 효과가 있는 함수입니다. 하지만 부수 효과를 갖는다고 해서 언제나 비순수 함수가 나쁘고 순수 함수가 좋은 것은 아닐뿐더러 모든 함수가 순수 함수일 수는 없습니다. 순수 함수를 통해 예기치 못한 부수효과와 오류를 피하고 앱의 안정성을 높이는 프로그래밍 패러다임을 추구하는 것이지 UI 애플리케이션의 특성상 많은 상태 변화가 일어나기 때문에 의도대로 작동하게 하는 코드를 구현하는 것이 맞습니다.\n"
  },
  {
    "id": 14,
    "title": "호이스팅",
    "category": "Javascript",
    "path": "호이스팅",
    "date": "2022년 7월 10일",
    "content": "# 호이스팅\n\n&emsp;자바스크립트 엔진은 모든 선언문을 소스코드내 위치와 상관없이 런타임 이전에 먼저 실행을 합니다. 선언문은 런타임 이전 평가 과정에서 스코프에 등록이 되고 어디서든 참조할 수 있는 것 처럼 만들어집니다. 자바스크립트에서 이러한 특징을 호이스팅이라고 합니다. 변수뿐만 아니라 var, let, const, function 키워드 등을 사용해서 선언하는 모든 식별자는 런타임 이전 단계에서 실행되기 때문에 호이스팅 됩니다.\n\n```js\nconsole.log(user) // undefined\nvar user = 'john'\n```\n<!-- 함수 표현식 / 함수 선언문 -->\n\n코드가 한 줄씩 순차적으로 실행되기 시작하는 런타임에는 이미 함수 객체가 생성되어 있고 함수 이름과 동일한 식별자에 할당까지 완료된 상태이다. 따라서 함수 선언문의 소스코드가 평가되고 실행되기 이전에 함수를 참조할 수 있으며 호출할 수도 있다. 이처럼 **함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅**이라 한다.\n\n>프로그래밍 언어마다 호이스팅을 어떻게 허용할 건지가 다 다르지만 자바스크립트는 변수, 함수 상관없이 전부 호이스팅이 됩니다. 모든 선언문은 런타임 이전 단계에서 먼저 실행되기 때문입니다.\n\n변수 호이스팅에 의해 var 키워드로 선언된 함수 표현식은 undefined로 초기화되고, **함수 선언문을 통해 암묵적으로 생성된 식별자는 함수 객체로 초기화된다.** 따라서 var 키워드를 사용한 변수 선언문은 이전에 변수를 참조하면 변수 호이스팅에 의해 undefined로 평가되지만, **함수 선언문으로 정의한 함수를 함수 선언문 이전에 호출하면 함수 호이스팅에 의해 호출이 가능하다.**\n\nvar와 다르게 let과 const 키워드를 사용하여 변수의 선언전에 참조하고자하면 ~~ 에러가 발생합니다. var let const는 전부 호이스팅을 지원합니다. 다만 기능을 추가한 것 뿐입니다. let과 const도 똑같이 호이스팅이 돼서 동일하게 변수 사전에 들어가지만 코드를 선언하는 구문에 도달하기 전에는 변수를 사용할 수 없도록 동작합니다.\n\nconsole.log(varVar)\n\nvar varVar = 'moon'\n\nconsole.log(letVar) \nconsole.log(constVar)\n\nlet letVar = 'john'\nconst constVar = 'jane'"
  },
  {
    "id": 15,
    "title": "Promise",
    "category": "Javascript",
    "path": "Promise",
    "date": "2022년 4월 1일",
    "content": "\n# "
  },
  {
    "id": 16,
    "title": "프로토타입",
    "category": "Javascript",
    "path": "프로토타입",
    "date": "2022년 7월 10일",
    "content": "\n### 프로토타입"
  },
  {
    "id": 17,
    "title": "스코프",
    "category": "Javascript",
    "path": "스코프",
    "date": "2022년 7월 10일",
    "content": "# 스코프\n\n스코프란 **식별자(변수)가 유효한 범위**를 의미합니다. 자바스크립트 엔진은 스코프를 사용하여 식별자를 검색하거나 변수를 참조합니다.\n\n### 전역 스코프\n&emsp;전역이란 코드의 가장 바깥 영역을 의미합니다. 전역에 변수를 선언하면 전역 스코프를 가지게 되는 전역 변수가 됩니다. 전역 변수는 전역 스코프를 가지기 때문에 **어디서든 참조할 수 있습니다**.\n\n>### 전역변수의 문제점\n>스코프의 관점에서 봤을때 전연 변수는 프로그램의 어디서든 접근이 가능합니다. 앱에서 에러가 발생했을때 디버깅을 위해 확인해야 할 코드의 범위가 코드 전체가 됩니다. 그만큼 오류를 수정하는데 드는 비용과 시간이 크다는 의미입니다.\n\n### 지역 스코프\n&emsp;지역은 함수 내부의 영역을 의미합니다. 지역에 변수를 선언하면 지역 스코프를 가지게 되는 지역 변수가 됩니다. 지역 변수는 지역 스코프를 가지기 때문에 **그 지역 스코프 혹은 하위 지역 스코프에서 유효**합니다.\n\n### 렉시컬/정적 스코프\n&emsp;렉시컬 스코프는 함수의 **호출 위치**가 아닌 함수의 **정의 위치**에 따라 함수의 상위 스코프가 결정되는 것을 의미합니다.\n\n```js\nvar x = 1;\nfunction foo() {\n  var x = 10;\n  bar();\n}\nfunction bar() {\n  console.log(x);\n}\nfoo(); // 1\nbar(); // 1\n```\n\n함수 bar는 함수 foo의 내부에서 호출되고 있으나 전역 스코프에서 정의되었기 때문에 함수 foo 내부의 x=10을 참조 할 수 없습니다."
  },
  {
    "id": 18,
    "title": "This",
    "category": "Javascript",
    "path": "This",
    "date": "2022년 7월 10일",
    "content": "\n# This\n"
  },
  {
    "id": 19,
    "title": "한글 URI가 깨져서 나와요 decodeURI()",
    "category": "Javascript",
    "path": "한글-URI가-깨져서-나와요-decodeURI()",
    "date": "2022년 6월 26일",
    "content": "\n> ### 한글 uri가 깨져서 나와요 decodeURI()\n\n간혹 브라우저 uri에 **%20**가 포함된 경우를 보셨을겁니다. 브라우저는 문자간 공백문자를 인코딩하는 과정에서 치환합니다.\n\nuri값을 사용하거나 인코딩된 uri를 한글로 다시 디코딩해야하는 경우가 있습니다.\n\n**decodeURI()**는 encodeURI 또는 비슷한 루틴으로 생성된 uri를 디코딩 해줍니다.\n\n```javascript\nconst uri = 'https://somesite.com/리액트';\nconst encoded = encodeURI(uri);\nconsole.log(encoded);\n// expected output: \"https://somesite.com/%EB%A6%AC%EC%95%A1%ED%8A%B8\"\nconsole.log(window.location.pathname)\n// expected output: \"https://somesite.com/%EB%A6%AC%EC%95%A1%ED%8A%B8\"\n\ntry {\n  console.log(decodeURI(encoded));\n  // expected output: \"https://somesite.com/리액트\"\n} catch (e) {\n  console.error(e);\n}\n```\n\nwindow객체나 훅으로 uri나 리소스에 접근하실때 사용해보면 되겠습니다."
  },
  {
    "id": 20,
    "title": "변수 var let const",
    "category": "Javascript",
    "path": "변수-var-let-const",
    "date": "2022년 7월 10일",
    "content": "\n# 변수\n\n&emsp;변수는 하나의 값을 저장하기 위해 확보한 **메모리 공간** 또는 그 메모리 공간을 식별하기 위해 붙인 **이름**을 말합니다. 변수의 이름을 **식별자**라고도 합니다. 식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말하고 **어떤 값을 구별하기 위해서 식별자는 값이 아니라 메모리 주소**를 기억하고 있습니다.\n\n### 변수의 선언\n\n변수의 선언은 변수를 생성하는 것을 말하고 구체적으로 하나의 값을 저장하기 위해 메모리 공간 자체를 확보한 뒤 변수 이름과 메모리 공간의 주소를 연결해 값을 저장하는 것입니다. 변수를 사용하려면 선언을 반드시 해야하고 선언에는 var, let, const 키워드가 사용됩니다.\n\n> ### 변수의 생명주기\n>\n> 변수는 선언에 의해 생성되고 할당을 통해 값을 갖게 됩니다. 전역 변수의 생명주기는 앱의 생명주기와 동일하며 함수내부에서 선언된 지역변수는 함수가 호출되는 시점부터 종료되는 시점까지 유효합니다.\n\n## var, let, const\n\n&emsp;var, let, const는 전부 변수를 선언할때 사용하는 키워드입니다. 키워드란 자바스크립트 코드를 해석하고 실행하는 엔진이 수행할 동작을 규정한 명령어입니다. 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행하고 선언 키워드는 각각의 고유 특성을 갖습니다.\n\n# var\n\n### 1) 변수 재선언 / 재할당 허용\n\n&emsp;var로 선언된 변수는 같은 스코프 내에서 중복 선인이 허용됩니다. 다만 중복선언이 되면 값이 재할당되어 의도치않게 부작용을 발생시킵니다.\n\n```js\nfunction foo() {\n  var varVariable = 20;\n  var varVariable = 30;\n  var varVariable = null;\n  console.log(varVariable);\n}\nfoo(); // null\n```\n\n### 2) 함수 레벨 스코프\n\n&emsp;var로 선언된 변수는 함수 레벨 스코프를 지역 스코프로 인정합니다.\n\n```js\nvar varVariable = 20;\nif (true) {\n  var varVariable = 30;\n}\nconsole.log(varVariable); // 30;\n```\n\n### 3) 변수 호이스팅\n\n&emsp;var로 선언된 키워드는 **선언과 동시에 초기화 단계가 실행**이 되어 변수의 호이스팅이 일어납니다. 런타임(평가단계)에서 스코프에 등록되기 때문에 실행 단계에서 값이 할당되지 않더라도 undefined를 가지고 있습니다.\n\n```js\n// 선언과 초기화가 이루어집니다\nconsole.log(varVariable); // undefined\nvarVariable = 10; // 할당이 이루어집니다\nconsole.log(varVariable); // 10\nvar varVariable;\n```\n\n# let\n\n### 1) 변수의 재선언 금지 / 재할당 허용\n\n&emsp;let 키워드는 var와 다르게 변수의 중복 선언이 허용되지 않습니다. 변수를 재선언할 경우 문법 에러가 발생합니다.\n\n```js\nlet letVariable = 10;\nletVariable = 20;\nconsole.log(letVariable); // 20\nlet letVariable = 30; // SyntaxError: Identifier 'letVariable' has already been declared\n```\n\n### 2) 블록 레벨 스코프\n\n&emsp;let 키워드로 선언된 변수는 블록 레벨 스코프를 지역 스코프로 인정합니다.\n\n```js\nlet foo = 10; // 전역 변수\n{\n  let foo = 20; // 지역 변수\n  let bar = 30; // 지역 변수\n}\nconsole.log(foo); // 10\nconsole.log(bar); // ReferenceError: bar is not defined\n```\n\n### 3) 변수 호이스팅\n\n&emsp;let으로 선언한 변수는 var로 선언된 변수와 달리 호이스팅이 발생하지 않는 것처럼 동작합니다. **let은 선언 단계, 초기화 단계 그리고 할당 단계가 분리되어 실행됩니다.** 선언 단계는 런타임(평가단계)에서 실행이 되지만 초기화 단계는 선언문에 도달했을때 실행이 됩니다.\n\n```js\nconsole.log(letVariable); // Uncaught ReferenceError: letVariable is not defined\nlet letVariable;\n```\n\n&emsp;let 키워드는 호이스팅이 발생하지만 코드를 선언하는 구문에 도달하기 전에는 변수를 사용할 수 없도록 동작합니다.\n\n> ### 일시적 사각지대(Temporal Dead Zone)\n>\n> let 키워드로 변수의 선언 단계부터 초기화 단계(선언문)가 이루어지기 전까지 참조할 수 없는 구간을 **일시적 사각지대**라고 합니다.\n>\n> ```js\n> // 런타임 이전에 선언 단계 실행\n> console.log(letVariable); // Uncaught ReferenceError: letVariable is not defined\n> let letVariable; // 선언문 도달에 초기화 단계 실행\n> console.log(letVariable); // undefined\n> letVariable = 10; // 할당문에 할당 단계 실행\n> console.log(letVariable); // 10\n> ```\n\n<!-- </br> -->\n\n<img src=\"https://readmedata.github.io/data/tdz.png\" alt=\"변수 일시적 사각지대 TDZ\" width='650' height='270'>\n\n<span>1.1 다시 처음부터 JavaScript || 변수생명주기, var, let, const 키워드, https://velog.io/@vlrtpfdkxm/다시-처음부터-JavaScript-스코프-nicii94x</span>\n\n# const\n\n### 1) 변수의 재선언 / 재할당 금지\n\n&emsp;const 키워드는 재선언과 재할당이 허용되지 않으며 **선언, 초기화, 할당 단계가 같이 실행**됩니다.\n\n```js\nconst constVariable // SyntaxError: Missing initializer in const declaration.\nconst constVariable = 10 // 10\nconstVariable = 20  // TypeError: Assignment to constant variable\n```\n\n&emsp;const로 선언한 변수에 원시 값을 할당한 경우 변수 값을 변경할 수 없습니다. 이러한 특성을 활용해 const 키워드로 상수를 표현하는 데 사용됩니다.\n\n```js\nconst DISCOUNT_RATE = 0.25;\nlet price = 1000;\nlet discountPrice = price * DISCOUNT_RATE;\n```\n\n> const는 let과 공통적인 특징이 많습니다. const로 선언하면 해당 식별자가 재할당되지 않을 것을 의미하기 때문에 반복문 등과 같이 변수의 값이 변할 경우 let을 사용하고 그 외 경우에는 const의 사용이 일반적으로 권고됩니다.\n\n### 2) 블록 레벨 스코프\n\n&emsp;const로 선언된 변수는 반드시 선언과 동시에 초기화를 하지 않으면 문법 에러가 발생합니다.\n\n### 3) const와 객체\n\n&emsp;const로 선언한 변수의 원시값을 할당한 경우 값을 변경할 수 없지만 변수에 객체를 할당한 경우 값을 변경할 수 있습니다.\n\n```js\nconst constVariable = {\n  name: 'john',\n};\nconstVariable.name = 'jane';\nconsole.log(constVariable.name); // 'jane'\n```\n"
  }
]
