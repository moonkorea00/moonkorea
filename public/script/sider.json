[{"name":"웹","variant":"Browser","posts":[{"path":"Browser-CS-구글-검색-엔진","title":"Google 검색 : 크롤링부터 검색 노출","category":"Browser","excerpt":"Google 검색은 자동화된 검색엔진으로 정기적으로 웹을 탐색하며 웹에 대한 정보를 수집하고 Google index에 추가할 페이지들을 찾습니다. 신기하게도 구글은 페이지에 대한 정보를 수집할 때 사용자가 웹페이지에서 상호작용 경험을 어떻게 인식하는지를 측정하기 위해 사용자가 페이지에 접근하는 방식과 유사하게 Chrome을 사용해서 페이지를 렌더링합니다.","description":"구글 검색 엔진이 검색 결과를 보여주기까지의 간략한 과정 소개","tags":"구글 검색 엔진, 크롤링, 색인, SEO","date":"2022-12-26"},{"path":"Browser-CS-브라우저-렌더링","title":"브라우저 렌더링","category":"Browser","excerpt":"웹 브라우저는 프론트엔드 개발자들이 만든 앱이 실행되는 환경이자 우리가 일상생활에서 가장 많이 사용하는 소프트웨어일 것입니다. 사용자에게 웹 페이지를 그려주는 일을 하기 위해 주소창에 url이 입력된 시점부터 웹 페이지가 보여지기까지 화면 뒤에서 무수히 많은 작업들을 합니다.","description":"3분만에 읽어보는 간략한 브라우저 렌더링","tags":"브라우저 엔진, 자바스크립트 엔진, Critical Rendering Path","date":"2022-07-06"}]},{"name":"자바스크립트","variant":"Javascript","posts":[{"path":"Javascript-this","title":"자바스크립트에서 this에 대해","category":"Javascript","excerpt":"this는 모든 함수 스코프 내에 자동으로 생성되는 특수한 식별자이자 자기 자신이 속한 객체를 가리키는 식별자를 참조할 수 있는 키워드입니다. 처음 접할 때(물론 계속 접하더라도) 난해하지만 이름만큼은 직관적으로 지은 것 같습니다.","description":"함수 호출 방법에 따른 this 바인딩","tags":"this","date":"2023-01-04"},{"path":"Javascript-리스트-순회와-이터러블-이터레이터-(ES6)","title":"리스트 순회와 이터러블, 이터레이터(ES6)","category":"Javascript","excerpt":"es6에서는 리스트를 어떻게 순회하는지 명령적으로 기술하기 보다는 선언적으로 리스트안에 있는 값들을 순회합니다. es6에서 for문이 어떤식으로 추상화돼있고 어떻게 이터러블 / 이터레이터라는 규약을 따르는지 알아보겠습니다.","description":"ES6에서 for문의 추상화 간략하게 훑어보기","tags":"Iterable, Iterator, ES6, 반복문","date":"2022-12-08"},{"path":"Javascript-변수-var-let-const","title":"변수 var let const","category":"Javascript","excerpt":"변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말합니다. 변수의 이름을 식별자라고도 합니다. 식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말하고 어떤 값을 구별하기 위해서 식별자는 값이 아니라 메모리 주소를 기억하고 있습니다.","description":"선언, 할당, 스코프와 호이스팅의 관점에서 변수 간략하게 알아보기","tags":"ES6, 변수","date":"2022-07-10"},{"path":"Javascript-순수함수","title":"순수함수와 부수 효과","category":"Javascript","excerpt":"함수형 프로그래밍에서는 함수의 인자와 return값을 이용해서 소통하는 것을 권장합니다. 이를 토대로 안정적이고 예측 가능한 코드를 만들고자 하는 목적과 방향성에서 더욱 주목받게 되었습니다. 순수 함수는 동일한 입력값을 전달했을 때 언제나 동일한 결과값을 반환하는 함수입니다.","description":"함수형 프로그래밍에서 순수함수와 부수 효과","tags":"함수형 프로그래밍","date":"2022-07-17"},{"path":"Javascript-스코프","title":"스코프","category":"Javascript","excerpt":"스코프란 식별자(변수)가 유효한 범위를 의미합니다. 자바스크립트 엔진은 스코프를 사용하여 식별자를 검색하거나 변수를 참조합니다. 전역 스코프, 지역 스코프 그리고 렉시컬 스코프에 대해 간략하게 알아보겠습니다.","description":"전역 스코프, 지역 스코프 그리고 렉시컬 스코프","tags":"스코프","date":"2022-07-10"},{"path":"Javascript-실행-컨텍스트","title":"실행 컨텍스트","category":"Javascript","excerpt":"실행 컨텍스트는 자바스크립트 코드의 실행부터 종료까지 전부 관리하기 때문에 자바스크립트에서 핵심 개념입니다. 브라우저는 자바스크립트 코드를 해석하고 실행하기에 앞서 자바스크립트가 실행될 수 있도록 특별한 환경인 실행 컨텍스트를 생성합니다.","description":"자바스크립트 코드의 실행부터 관리와 종료까지","tags":"렉시컬 환경, 클로저, 스코프, 호이스팅, this","date":"2022-12-03"}]},{"name":"리액트","variant":"React","posts":[{"path":"React-NextJS-빌드-리소스-살펴보기","title":"NextJS 빌드 리소스 살펴보기","category":"React","excerpt":"NextJS에서는 서버 사이드 렌더 전략에 따라 리소스가 빌드타임에 생성된 정적 파일로 클라이언트에게 제공되거나 매 요청마다 서버에서 생성되어 클라이언트에게 전달됩니다. NextJS에서 빌드 시에 생성되는 이 리소스들에 대해 살펴보고 이 리소스들이 서버로부터 클라이언트 브라우저에게 어느 시점 전달되어 사용되는지 알아보겠습니다.","description":"next build로 생성된 빌드 폴더 훑어보기","tags":"NextJS, 서버 사이드 렌더링, next build","date":"2023-02-28"},{"path":"React-렌더링-및-최적화-(1)","title":"React 렌더링 (1)","category":"React","excerpt":"리액트에서 렌더링이란 어떤 것을 의미할까요? 렌더링이란 다양한 레벨에서 사용되는 추상적인 개념이지만 이미지를 그려내는 과정, 즉 리액트에서 렌더링이란 화면에 특정한 요소를 그려내는 것을 의미합니다. 리렌더링의 프로세스가 복잡해지거나 빈도가 잦으면 그에 따른 실행 비용이 올라가고 결국 퍼포먼스의 저하로 이어지게 됩니다.","description":"리액트에서 언제 리렌더가 발생할까?","tags":"렌더링, 상태","date":"2022-11-23"},{"path":"React-렌더링-및-최적화-(2)-React-memo","title":"React 렌더링 (2) React.memo","category":"React","excerpt":"컴포넌트의 상태가 업데이트될 경우 해당 컴포넌트와 하위에 있는 모든 컴포넌트들은 모두 리렌더링됩니다. 해당 컴포넌트의 상태가 변했을 때는 변경된 상태에 맞게 UI가 다시 그려지는 것이 당연한 것인데 하위 컴포넌트의 props가 변하지 않았을 경우 불필요하게 새로운 함수를 호출하기 보다 초기 렌더링에서 저장한 값을 재사용하는 것이 효율적입니다.","description":"memo를 통한 컴포넌트 리렌더링 방지","tags":"렌더링, 상태, memo","date":"2022-11-23"},{"path":"React-클라이언트-관점에서-NextJS-빌드-리소스-살펴보기","title":"클라이언트 관점에서 NextJS 빌드 리소스 살펴보기","category":"React","excerpt":"앞서 NextJS 빌드 리소스 살펴보기 에서는 빌드 결과와 빌드 디렉토리에 어떤 파일들이 만들어졌는지 간략하게 알아봤습니다. 이어서 클라이언트 브라우저에서 어떤 리소스들이 응답으로 서빙되는지 살펴보겠습니다.","description":"클라이언트는 Next 서버에서 어떤 리소스들을 응답으로 받는지 알아보기","tags":"NextJS, 서버 사이드 렌더링, 개발자 도구","date":"2023-03-01"}]},{"name":"AWS","variant":"AWS","posts":[]},{"name":"튜토리얼 / 트러블슈팅","variant":"Tutorial","posts":[{"path":"Tutorial-AWS-CloudFront-도메인-에러","title":"CloudFront 에러 - This XML file does not appear to have any style information associated with it","category":"Tutorial","excerpt":"로컬 서버에서는 앱이 문제없이 작동하다가 CloudFront 배포 후 대체 도메인 이름으로 접근하려고 하면 다음과 같은 텍스트가 출력이 되는 경우가 있습니다.","description":"CloudFront 배포 트러블슈팅","tags":"트러블슈팅, AWS, CloudFront","date":"2022-07-24"},{"path":"Tutorial-AWS-CloudFront","title":"CDN(CloudFront)","category":"Tutorial","excerpt":"AWS CloudFront는 캐싱 서버와 CDN 서비스를 제공하고 html, css, js 및 이미지 파일 등과 같은 정적/동적 콘텐츠를 최종 사용자에게 더 빨리 배포하도록 지원하는 서비스입니다.","description":"CloudFront 배포 시작하기","tags":"튜토리얼, AWS, CloudFront, CDN, 엣지 로케이션","date":"2022-07-24"},{"path":"Tutorial-AWS-S3-CICD-파이프라인-구축","title":"S3 CI-CD 파이프라인 구축 (Github Actions)","category":"Tutorial","excerpt":"S3 버킷을 사용해서 앱 배포까지 완료가 되었으면 Github Actions를 통해서 CI/CD 파이프라인을 구축합니다. 코드베이스에 변경 사항이 생길 때마다 빌드, 테스트, 배포 자동화까지 한 번에 처리합니다.","description":"GitHub Actions로 빌드, 테스트, 배포 자동화 튜토리얼","tags":"튜토리얼, CICD, GitHub Actions","date":"2022-07-24"},{"path":"Tutorial-AWS-커스텀 도메인-(Route53)","title":"커스텀 도메인 (Route 53)","category":"Tutorial","excerpt":"Route 53으로는 도메인의 인터넷 트래픽을 라우팅할 위치를 정의하기 때문에 별칭 레코드(alias)를 생성해 IP 주소 대신 S3 웹 사이트 엔드포인트를 사용합니다. AWS S3를 사용해서 버킷을 생성했으면 Route 53으로 도메인을 등록합니다.","description":"커스텀 도메인 설정하기 튜토리얼","tags":"튜토리얼, AWS, Route 53","date":"2022-07-24"},{"path":"Tutorial-이메일-전송하기-nodemailer","title":"nodemailer로 이메일 전송(Zoho mail)","category":"Tutorial","excerpt":"nodemailer로 사용자에게 이메일을 보내 사용자 인증 프로세스를 처리하거나 알림의 기능이 필요한 경우의 과정을 다뤄보겠습니다. nodemailer 모듈은 발신자와 수신자 정보, 보낼 내용만 설정하여 간편하게 서드파티 앱에서 이메일을 보낼 수 있게 도와줍니다","description":"비즈니스 계정으로 사용자에게 이메일 보내기","tags":"튜토리얼, nodemailer, Node.js","date":"2023-02-23"}]}]